LANG "en"
HEAD
	INCLUDE arcade
	CHARSET "UTF-8"
    DESCRIPTION "This is a kytschBASIC example"
    KEYWORDS "kytschBASIC, BASIC, web BASIC"
    AUTHOR "Mike Welsh"
    VIEWPORT "width=device-width, initial-scale=1.0"
    FAVICON "/kytschi/imgs/favicon.ico","64x64"
    PALETTE "/kytschi/css/sevens"
	NAME "Arcade - Sevens | kytschBASIC"
END HEAD
BODY
DIM suits$=("diamonds", "clubs","hearts","spades")
DIM faces$=("1","2","3","4","5","6","7","8","9","10","11","12","13")
DIM names$=("You", "Ernest", "Laura", "Lenny", "Brian", "Helen", "Angie")

DIM cards$=()
DIM hands$=()

DEF no_players%=3

IFNTE _GET("np") THEN
    LET no_players%=_GET("np")
END IF

IF no_players%<3 THEN
	LET no_players%=3
END IF

DEF end%=(52/no_players%)-1
LET no_players%=no_players%-1

FOR suit$ IN suits$
    FOR face$ IN faces$
        LET cards$()="/kytschi/imgs/cards/" + suit$ + "_" + face$ + ".svg"
    NEXT
NEXT

SHUFFLE(cards$)

FOR player%=0 TO no_players%
    DIM hand$=()
    FOR iLoop%=0 TO end%
        LET hand$()=cards$(0)
        SHIFT(cards$)
    NEXT
    NATSORT(hand$)
    LET hands$(player%)=hand$
NEXT

MERGE(hands$(no_players%), cards$)

ADIM hands$=hands$
ADIM names$=names$

ADIM diamonds%=(7)
ADIM clubs%=(7)
ADIM spades%=(7)
ADIM hearts%=(7)
ADEF selected_card$=""
ADEF deck_suit$=""
ADEF card_suit$=""
ADEF turn%=0
ADEF game_over%=0
ADEF start%=1

AFUNCTION computerPlay()
    if (game_over) {
        return;
    }

    var value = "";
    var played = false;

    hands[turn].sort(() => Math.random() - .5);

    hands[turn].forEach((card, index) => {
        if (!played) {
            selected_card = (card).replace("/kytschi/imgs/cards/", "").replace(".svg", "");
            let card_details = selected_card.split("_");
            deck_suit = card_details[0];
            value = card_details[1];

            if (canPlay(event, value)) {
                playCard(event, value);
                hands[turn].splice(index, 1);
                if (hands[turn].length == 1) {
                    gameInfo(event, "LAST CARD");
                } else if (hands[turn].length == 0) {
                    gameOver(event);
                }
                played = true;
            }
        }
    });

    if (!played) {
        gameInfo(event, "KNOCKING");
    }

    updateTurn();
END AFUNCTION

AFUNCTION updateTurn()
    if (game_over) {
        return;
    }

    $("#player-" + turn).removeClass("player-turn");

    turn += 1;
    if (turn == hands.length) {
        turn = 0;
    }
    
    $("#player-" + turn).addClass("player-turn");

    if (turn != 0) {
        computerPlay();
    }
END AFUNCTION

AFUNCTION updateDeck(cards, value, check = false)
    let status = false;

    if (window[cards].length == 1) {
        if (value != 7 && deck_suit != "diamonds" && start == 1) {
            gameInfo(event, "Start with the 7 of diamonds", true);
            return;
        }

        start = 0;

        if (window[cards][0] == value) {
            if (!check) {
                $("button[name=btnLastCard]").removeAttr("disabled");
                window[cards] = [6,8];
            }
            return true;
        }
    } else {
        window[cards].forEach((face, index) => {
            if (face == value) {
                if (!check) {
                    $("button[name=btnLastCard]").removeAttr("disabled");
                    window[cards][index] = window[cards][index] + ((face < 7) ? -1 : 1);
                }
                status = true;
                return;
            }
        });
    }

    return status;
END AFUNCTION

AFUNCTION canPlay(value, check = false)
    if (game_over) {
        return;
    }

    switch (deck_suit) {
        case "diamonds":
            return updateDeck(event, "diamonds", value, check);
        case "clubs":
            return updateDeck(event, "clubs", value, check);
        case "hearts":
            return updateDeck(event, "hearts", value, check);
        case "spades":
            return updateDeck(event, "spades", value, check);
        default:
            return false;
    }
END AFUNCTION

AFUNCTION onCardClick()
    selected_card = event.target.parentElement.id;
    card_suit = (selected_card).split("_")[0];
    $("#hand .card").removeClass(["card-highlight", "card-warn"]);
    $("#" + selected_card).addClass("card-highlight");
END AFUNCTION

AFUNCTION playerKnocking()
    if (game_over) {
        return;
    }

    var valid = true, no_update = false;
    
    $("#hand").children().each((index, card) => {
        let card_details = $(card).attr("id").split("_");
        deck_suit = card_details[0];
        let value = card_details[1];

        if (canPlay(event, value, true)) {
            if (deck_suit == "diamonds" && value == "7") {
                no_update = true;
            }
            $(card).addClass("card-warn");
            valid = false;
        }
    });

    if (valid == true) {
        gameInfo(event, "KNOCKING");
    } else {
        gameInfo(event, "INVALID KNOCKING!" + (!no_update ? " Miss a turn" : ""), true);
    }

    if (!no_update) {
        updateTurn();
    }
END AFUNCTION

AFUNCTION playCard(value)
    $("#" + selected_card).removeClass(["card-highlight", "card-warn"]);

    if (turn == 0) {
        $("#" + deck_suit).append($("#" + selected_card).prop("outerHTML"));
    } else {
        $("#" + deck_suit).append('<div id="' + selected_card + '" class="card" onclick="javascript:onCardClick(event)"><img src="/kytschi/imgs/cards/' + selected_card + '.svg"></div>');
    }

    $("#" + deck_suit + " #" + selected_card).attr("onclick", $("#" + deck_suit + "_placeholder").attr("onclick"));

    if (value < 7) {
        $("#" + deck_suit + " #" + selected_card).addClass("card-lower");
    } else if (value > 7) {
        $("#" + deck_suit + " #" + selected_card).addClass("card-higher");
    }

    if (value == "11") {
        value = "jack";
    } else if (value == "12") {
        value = "queen";
    } else if (value == "13") {
        value = "king";
    } else if (value == "1") {
        value = "ace";
    }

    gameInfo(event, value + " of " + deck_suit);

    if (turn == 0) {
        $("#hand #" + selected_card).remove();
        hands[turn].forEach((card, index) => {
            let check = (card).replace("/kytschi/imgs/cards/", "").replace(".svg", "");
            if (check == selected_card) {
                hands[turn].splice(index, 1);
            }
        });
    }

    $("#player-" + turn + "-cards span").html(parseInt($("#player-" + turn + "-cards span").html()) - 1);

    selected_card = "";
END AFUNCTION

AFUNCTION onDeckClick()
    if (game_over) {
        return;
    }

    deck_suit = (event.target.parentElement.id).split("_")[0];

    if (selected_card && deck_suit == card_suit) {
        let value = parseInt(selected_card.split("_")[1]);

        if (!canPlay(event, value)) {
            gameInfo(event, "INVALID PLAY", true);
            return;
        }

        playCard(event, value);
        if ($("#hand").children().length == 0) {
            gameOver(event);
        } else if ($("#hand").children().length == 1) {
            gameInfo(event, "LAST CARD");
        }
        updateTurn();
    } else {
        gameInfo(event, "INVALID PLAY", true);
    }
END AFUNCTION

AFUNCTION gameInfo(text, error = false)
    $("#game-info").val($("#game-info").val() + (error ? "ERROR" : names[turn]) + ": " + text + "\n");
    $("#game-info").scrollTop($("#game-info")[0].scrollHeight);
END AFUNCTION

AFUNCTION gameOver()
    var score = 0, card_details, value = 0;

    if (typeof(kb_cookie.kb_sevens_scores) == "undefined") {
        kb_cookie.kb_sevens_scores = {};
        names.forEach((player, index) => {
            kb_cookie.kb_sevens_scores[index] = {
                "score": 0
            }
        });
    }

    game_over = 1;
    gameInfo(event, "I WIN!!!");

    for (var iLoop = 0; iLoop < hands.length; iLoop++) {
        score = parseInt($("#player-" + iLoop + "-score span").html());

        hands[iLoop].forEach((card, index) => {
            card_details = (card).replace("/kytschi/imgs/cards/", "").replace(".svg", "").split("_");
            value = parseInt(card_details[1]);
            if (value == 1) {
                score += 11;
            } else if (([11, 12, 13]).includes(value)) {
                score += 10;
            } else {
                score += value;
            }
        });

        $("#player-" + iLoop + "-score span").html(score);
        kb_cookie.kb_sevens_scores[iLoop].score = score;
    }

    Cookies.set("kb_HLPR", JSON.stringify(kb_cookie));
END AFUNCTION

JAVASCRIPT
$(document).ready(function() {
    var played = false;
    
    if (typeof(kb_cookie.kb_sevens_scores) != "undefined") {
        for (const [player, value] of Object.entries(kb_cookie.kb_sevens_scores)) {
            $("#player-" + player + "-score span").html(value.score);
        }
    }

    for (iLoop = 1; iLoop <= hands.length - 1; iLoop++) {
        turn = iLoop;
        hands[turn].forEach((card, index) => {
            if (!played) {
                selected_card = (card).replace("/kytschi/imgs/cards/", "").replace(".svg", "");
                let card_details = selected_card.split("_");
                deck_suit = card_details[0];
                value = card_details[1];   
                if (deck_suit == "diamonds" && value == "7") {
                    played = true;
                    playCard(event, value);
                    hands[turn].splice(index, 1);
                    updateDeck(event, "diamonds", value);
                    updateTurn();
                }
            }
        });

        if (played) {
            break;
        }
    }

    if (!played) {
        turn = 0;
    }

    $("button[name=btnKnock]").click(() => {
        playerKnocking();
    });

    $("button[name=btnNewGame]").click(() => {
        window.location.reload();
    });
});
END JAVASCRIPT

SCREEN "sevens"
    WINDOW "board"
        WINDOW "deck"
            WINDOW "diamonds", "deck-placeholder"
                SPRITE "diamonds_placeholder","placeholder", "onDeckClick"
                    IMAGE "/kytschi/imgs/cards/diamonds_placeholder.svg"
                END SPRITE
            END WINDOW
            WINDOW "hearts", "deck-placeholder"
                SPRITE "hearts_placeholder","placeholder", "onDeckClick"
                    IMAGE "/kytschi/imgs/cards/hearts_placeholder.svg"
                END SPRITE
            END WINDOW
            WINDOW "spades", "deck-placeholder"
                SPRITE "spades_placeholder","placeholder", "onDeckClick"
                    IMAGE "/kytschi/imgs/cards/spades_placeholder.svg"
                END SPRITE
            END WINDOW
            WINDOW "clubs", "deck-placeholder"
                SPRITE "clubs_placeholder","placeholder", "onDeckClick"
                    IMAGE "/kytschi/imgs/cards/clubs_placeholder.svg"
                END SPRITE
            END WINDOW
        END WINDOW
        WINDOW "game"
            TABLE
                THEAD
                    TROW
                        THEADCELL
                            PRINT "&nbsp;"
                        END THEADCELL
                        THEADCELL ,"text-left"
                            PRINT "Player"
                        END THEADCELL
                        THEADCELL
                            PRINT "Cards"
                        END THEADCELL
                        THEADCELL
                            PRINT "Score"
                        END THEADCELL
                    END TROW
                END THEAD
                TBODY
                    FOR iLoop%=0 TO no_players%
                        DEF id$="score-"+iLoop%
                        TROW ,id$
                            TCELL ,,,"player-" + iLoop%
                                PRINT "&nbsp;"
                            END TCELL
                            TCELL
                                PRINT names$(iLoop%)
                            END TCELL
                            TCELL ,"text-center",,"player-" + iLoop% + "-cards"
                                PRINT COUNT(hands$(iLoop%))
                            END TCELL
                            TCELL ,"text-center",,"player-" + iLoop% + "-score"
                                PRINT "0"
                            END TCELL
                        END TROW
                    NEXT
                END TBODY
            END TABLE

            TEXTAREA "game-info", "",,, "game-info",,"autocomplete='off'"
        END WINDOW
    END WINDOW
    WINDOW "player"
        WINDOW "hand"
            FOR card$ IN hands$(0)
                DEF id$=REPLACE(card$, "/kytschi/imgs/cards/", "")
                DEF id$=REPLACE(id$, ".svg", "")
                SPRITE id$, "card", "onCardClick"
                    IMAGE card$
                END SPRITE
            NEXT
        END WINDOW
        WINDOW "controls"
            BUTTON "btnKnock", "btn-knocking"
                PRINT "knocking"
            END BUTTON
            BUTTON "btnNewGame", "btn-new-game"
                PRINT "new game"
            END BUTTON
        END WINDOW
    END WINDOW
END SCREEN
END BODY
END
